@page "/test"
@* Components/OnboardingForm.razor *@

<style>
    /* ** A More Beautiful Onboarding Wizard Style ** */

    /* Horizontal Stepper with Progress */
    .stepper {
        display: flex;
        justify-content: space-between;
        list-style: none;
        padding: 0;
        margin-bottom: 3rem;
        position: relative;
        max-width: 90%;
        margin-left: auto;
        margin-right: auto;
    }

        /* Base line for the stepper */
        .stepper::before {
            content: '';
            position: absolute;
            top: 18px;
            left: 5%;
            right: 5%;
            height: 3px;
            background-color: #e9ecef; /* gray-200 */
            z-index: 1;
        }

    /* Green progress line */
    .stepper-progress {
        position: absolute;
        top: 18px;
        left: 5%;
        height: 3px;
        background: linear-gradient(to right, #4CAF50, #81C784);
        z-index: 2;
        transition: width 0.4s ease-in-out;
    }

    .step {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        flex-basis: 25%;
        position: relative;
        z-index: 3;
    }

    .step-number {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        background-color: #F8F9FA; /* Same as body bg to "cut out" the line */
        border: 3px solid #e9ecef; /* gray-200 */
        color: #adb5bd; /* gray-400 */
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: 700;
        margin-bottom: 0.75rem;
        transition: all 0.4s ease;
    }

    .step-title {
        font-weight: 600;
        color: #adb5bd; /* gray-400 */
        font-size: 0.9rem;
        transition: all 0.4s ease;
    }

    /* Active Step Styling */
    .step.active .step-number {
        border-color: #4CAF50;
        color: #4CAF50;
        transform: scale(1.1);
        box-shadow: 0 0 15px rgba(76, 175, 80, 0.2);
    }

    .step.active .step-title {
        color: #212529; /* Darker text */
    }

    /* Completed Step Styling */
    .step.completed .step-number {
        background-color: #4CAF50;
        border-color: #4CAF50;
        color: white;
    }

    .step.completed .step-title {
        color: #495057; /* gray-700 */
    }

    /* Form Card & Inputs */
    .onboarding-card {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 20px 40px -15px rgba(0, 0, 0, 0.08);
        border: 1px solid #e9ecef;
        padding: 2.5rem 3rem;
    }

    .form-control {
        width: 100%;
        padding: 0.85rem 1rem;
        border: 1px solid #dee2e6; /* gray-300 */
        border-radius: 8px; /* Softer radius */
        font-size: 1rem;
        color: #495057; /* gray-700 */
        background-color: white;
        transition: all 0.2s ease-in-out;
    }

        .form-control:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.15);
        }

    /* Custom Icons for Inputs */
    .input-wrapper {
        position: relative;
    }

        .input-wrapper .icon {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
            color: #adb5bd; /* gray-400 */
        }

    .form-control.has-icon {
        padding-right: 2.75rem;
    }

    select.form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    /* Buttons */
    .btn {
        padding: 0.75rem 1.75rem;
        font-size: 0.95rem;
        font-weight: 600;
        border-radius: 8px;
        border: 1px solid transparent;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

    .btn-secondary {
        background-color: #f1f3f5; /* gray-100 */
        border-color: #dee2e6; /* gray-300 */
        color: #495057; /* gray-700 */
    }

        .btn-secondary:hover {
            background-color: #e9ecef; /* gray-200 */
            border-color: #ced4da; /* gray-400 */
        }

    .btn-primary {
        background-image: linear-gradient(to right, #4CAF50 0%, #66BB6A 100%);
        color: white;
        box-shadow: 0 4px 15px -5px rgba(76, 175, 80, 0.5);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px -5px rgba(76, 175, 80, 0.6);
        }
</style>

<div class="max-w-7xl px-4">
    <div class="text-center mb-10">
        <h1 class="text-4xl font-bold text-slate-800">Onboard New Hire</h1>
        <p class="text-slate-500 mt-2 text-lg">Follow the steps to add a new employee to the system.</p>
    </div>

    <ol class="stepper">
        <div class="stepper-progress" style="width: @(GetProgressWidth())%;"></div>
        @foreach (var step in steps)
        {
            <li class="@GetStepClass(step.Key)">
                <div class="step-number">
                    @if (currentStep > step.Key)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>
                    }
                    else
                    {
                        @step.Key
                    }
                </div>
                <div class="step-title">@step.Value.Title</div>
            </li>
        }
    </ol>

    <EditForm Model="@Model" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="onboarding-card">
            <h2 class="text-2xl font-semibold text-gray-800 mb-8">Step @currentStep: @steps[currentStep].Title</h2>

            @switch (currentStep)
            {
                case 1:
                    <div class="grid md:grid-cols-2 gap-x-8 gap-y-6">
                        <div class="form-group">
                            <label for="first-name" class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                            <InputText id="first-name" class="form-control" @bind-Value="Model.Employee.FirstName" placeholder="e.g., John" />
                        </div>
                        <div class="form-group">
                            <label for="last-name" class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                            <InputText id="last-name" class="form-control" @bind-Value="Model.Employee.LastName" placeholder="e.g., Smith" />
                        </div>
                        <div class="form-group md:col-span-2">
                            <label for="personal-email" class="block text-sm font-medium text-gray-700 mb-2">Personal Email</label>
                            <InputText type="email" id="personal-email" class="form-control" @bind-Value="Model.Employee.PersonalEmail" placeholder="e.g., john.smith@example.com" />
                        </div>
                        <div class="form-group">
                            <label for="job-title" class="block text-sm font-medium text-gray-700 mb-2">Job Title</label>
                            <InputText id="job-title" class="form-control" @bind-Value="Model.Job.JobTitle" placeholder="e.g., Senior Software Engineer" />
                        </div>
                        <div class="form-group">
                            <label for="start-date" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                            <div class="input-wrapper">
                                <InputDate id="start-date" class="form-control has-icon" @bind-Value="Model.Job.StartDate" />
                                <div class="icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
                                </div>
                            </div>
                        </div>
                    </div>
                    break;
                case 2:
                    <div class="grid md:grid-cols-2 gap-x-8 gap-y-6">
                        <div class="form-group">
                            <label for="department" class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                            <div class="input-wrapper">
                                <InputSelect id="department" class="form-control has-icon" @bind-Value="Model.Job.Department">
                                    <option value="">Select Department</option>
                                    <option value="Engineering">Engineering</option>
                                    <option value="Design">Design</option>
                                </InputSelect>
                                <div class="icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="manager" class="block text-sm font-medium text-gray-700 mb-2">Manager</label>
                            <div class="input-wrapper">
                                <InputSelect id="manager" class="form-control has-icon" @bind-Value="Model.Job.Manager">
                                    <option value="">Select Manager</option>
                                    <option value="David Chen">David Chen</option>
                                    <option value="Maria Garcia">Maria Garcia</option>
                                </InputSelect>
                                <div class="icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="salary" class="block text-sm font-medium text-gray-700 mb-2">Annual Salary</label>
                            <InputNumber id="salary" class="form-control" @bind-Value="Model.Job.AnnualSalary" placeholder="e.g., 50000" />
                        </div>
                        <div class="form-group">
                            <label for="qualification" class="block text-sm font-medium text-gray-700 mb-2">Qualification</label>
                            <InputText id="qualification" class="form-control" @bind-Value="Model.Job.Qualification" placeholder="e.g., B.Sc. Computer Science" />
                        </div>
                        <div class="form-group md:col-span-2">
                            <label for="reason" class="block text-sm font-medium text-gray-700 mb-2">Reason for Hire</label>
                            <InputTextArea id="reason" class="form-control" @bind-Value="Model.Job.ReasonForHire" placeholder="e.g., Backfill for departing employee..." rows="2" />
                        </div>
                    </div>
                    break;
            }

            <div class="flex justify-end items-center mt-12 pt-6 border-t border-gray-100">
                @if (currentStep > 1)
                {
                    <button type="button" @onclick="GoToPreviousStep" class="btn btn-secondary mr-auto">Previous Step</button>
                }
                <button type="button" class="btn btn-secondary mr-3">Save as Draft</button>
                <button type="submit" class="btn btn-primary">
                    @(currentStep == steps.Count ? "Finish Onboarding" : "Next: " + steps[currentStep + 1].Title)
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private int currentStep = 1;

    [Parameter]
    public OnboardingModel Model { get; set; } = new();

    private Dictionary<int, (string Title, string Description)> steps = new()
    {
        { 1, ("Basic Information", "") },
        { 2, ("Job & Compensation", "") },
        { 3, ("Documents", "") },
        { 4, ("Review & Onboard", "") }
    };

    private string GetStepClass(int step)
    {
        if (step == currentStep) return "step active";
        if (step < currentStep) return "step completed";
        return "step";
    }

    private double GetProgressWidth()
    {
        if (currentStep <= 1) return 0;
        double segmentWidth = 100.0 / (steps.Count - 1);
        return (currentStep - 1) * segmentWidth;
    }

    private void GoToPreviousStep()
    {
        if (currentStep > 1) currentStep--;
    }

    private void HandleSubmit()
    {
        if (currentStep < steps.Count)
        {
            currentStep++;
        }
        else
        {
            Console.WriteLine("Onboarding Complete!");
        }
    }
}




